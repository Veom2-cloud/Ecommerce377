[{"C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\index.js":"1","C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\store.js":"2","C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\reportWebVitals.js":"3","C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\App.js":"4","C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\reducers\\cartReducers.js":"5","C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\reducers\\productReducers.js":"6","C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\reducers\\orderReducers.js":"7","C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\reducers\\userReducers.js":"8","C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\screens\\HomeScreen.js":"9","C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\screens\\CartScreen.js":"10","C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\screens\\LoginScreen.js":"11","C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\screens\\ProductScreen.js":"12","C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\screens\\RegisterScreen.js":"13","C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\screens\\PlaceOrderScreen.js":"14","C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\screens\\ShippingScreen.js":"15","C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\screens\\PaymentScreen.js":"16","C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\screens\\ProfileScreen.js":"17","C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\screens\\OrderScreen.js":"18","C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\screens\\OrderListScreen.js":"19","C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\screens\\UserEditScreen.js":"20","C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\screens\\ProductListScreen.js":"21","C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\screens\\UserListScreen.js":"22","C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\components\\footer.js":"23","C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\components\\header.js":"24","C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\screens\\ProductEditScreen.js":"25","C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\components\\loader.js":"26","C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\components\\message.js":"27","C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\components\\FormContainer.js":"28","C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\components\\ProductCarousel.js":"29","C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\components\\Rating.js":"30","C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\components\\Product.js":"31","C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\components\\CheckoutSteps.js":"32","C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\components\\Paginate.js":"33","C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\constants\\cartConstants.js":"34","C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\constants\\userConstants.js":"35","C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\constants\\productConstants.js":"36","C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\constants\\orderConstants.js":"37","C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\actions\\userActions.js":"38","C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\actions\\orderAction.js":"39","C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\actions\\cartActions.js":"40","C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\actions\\productActions.js":"41","C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\components\\SearchBox.js":"42"},{"size":595,"mtime":1637485859000,"results":"43","hashOfConfig":"44"},{"size":2476,"mtime":1637485859000,"results":"45","hashOfConfig":"44"},{"size":362,"mtime":1637485859000,"results":"46","hashOfConfig":"44"},{"size":2182,"mtime":1637485859000,"results":"47","hashOfConfig":"44"},{"size":1162,"mtime":1637485859000,"results":"48","hashOfConfig":"44"},{"size":3829,"mtime":1637485859000,"results":"49","hashOfConfig":"44"},{"size":5970,"mtime":1637485859000,"results":"50","hashOfConfig":"44"},{"size":4703,"mtime":1637485859000,"results":"51","hashOfConfig":"44"},{"size":1417,"mtime":1661883665493,"results":"52","hashOfConfig":"44"},{"size":3692,"mtime":1637485859000,"results":"53","hashOfConfig":"44"},{"size":2244,"mtime":1637485859000,"results":"54","hashOfConfig":"44"},{"size":8440,"mtime":1662045533450,"results":"55","hashOfConfig":"44"},{"size":3423,"mtime":1637485859000,"results":"56","hashOfConfig":"44"},{"size":5274,"mtime":1637485859000,"results":"57","hashOfConfig":"44"},{"size":2770,"mtime":1637485859000,"results":"58","hashOfConfig":"44"},{"size":1495,"mtime":1637485859000,"results":"59","hashOfConfig":"44"},{"size":4869,"mtime":1637485859000,"results":"60","hashOfConfig":"44"},{"size":7633,"mtime":1637485859000,"results":"61","hashOfConfig":"44"},{"size":3231,"mtime":1637485859000,"results":"62","hashOfConfig":"44"},{"size":3282,"mtime":1637485859000,"results":"63","hashOfConfig":"44"},{"size":4185,"mtime":1662033981056,"results":"64","hashOfConfig":"44"},{"size":2863,"mtime":1637485859000,"results":"65","hashOfConfig":"44"},{"size":484,"mtime":1661883474467,"results":"66","hashOfConfig":"44"},{"size":2702,"mtime":1661882370740,"results":"67","hashOfConfig":"44"},{"size":6272,"mtime":1637485859000,"results":"68","hashOfConfig":"44"},{"size":456,"mtime":1637485859000,"results":"69","hashOfConfig":"44"},{"size":233,"mtime":1637485859000,"results":"70","hashOfConfig":"44"},{"size":417,"mtime":1637485859000,"results":"71","hashOfConfig":"44"},{"size":1263,"mtime":1637485859000,"results":"72","hashOfConfig":"44"},{"size":1477,"mtime":1637485859000,"results":"73","hashOfConfig":"44"},{"size":938,"mtime":1662033555661,"results":"74","hashOfConfig":"44"},{"size":1323,"mtime":1637485859000,"results":"75","hashOfConfig":"44"},{"size":1070,"mtime":1637485859000,"results":"76","hashOfConfig":"44"},{"size":288,"mtime":1637485859000,"results":"77","hashOfConfig":"44"},{"size":1516,"mtime":1637485859000,"results":"78","hashOfConfig":"44"},{"size":1530,"mtime":1637485859000,"results":"79","hashOfConfig":"44"},{"size":1481,"mtime":1637485859000,"results":"80","hashOfConfig":"44"},{"size":6621,"mtime":1637485859000,"results":"81","hashOfConfig":"44"},{"size":6450,"mtime":1637485859000,"results":"82","hashOfConfig":"44"},{"size":1416,"mtime":1637485859000,"results":"83","hashOfConfig":"44"},{"size":5525,"mtime":1637485859000,"results":"84","hashOfConfig":"44"},{"size":868,"mtime":1662034168977,"results":"85","hashOfConfig":"44"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},"1on9q9y",{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"88"},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"88"},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"88"},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"88"},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"88"},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"88"},{"filePath":"129","messages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"88"},{"filePath":"132","messages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"88"},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"88"},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"88"},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"143","messages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"88"},{"filePath":"146","messages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"88"},{"filePath":"149","messages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"151","messages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"153","messages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"88"},{"filePath":"156","messages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"158","messages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"160","messages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"162","messages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"164","messages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"166","messages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"170","messages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"172","messages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"174","messages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"88"},{"filePath":"177","messages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"88"},{"filePath":"180","messages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"182","messages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"88"},{"filePath":"185","messages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},"C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\index.js",[],["187","188"],"C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\store.js",[],"C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\reportWebVitals.js",[],"C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\App.js",[],"C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\reducers\\cartReducers.js",[],"C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\reducers\\productReducers.js",[],"C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\reducers\\orderReducers.js",[],"C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\reducers\\userReducers.js",[],"C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\screens\\HomeScreen.js",[],"C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\screens\\CartScreen.js",[],"C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\screens\\LoginScreen.js",[],"C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\screens\\ProductScreen.js",["189"],"C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\screens\\RegisterScreen.js",["190"],"import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Form, Button, Col, Row } from \"react-bootstrap\";\r\nimport Loader from \"../components/loader\";\r\nimport Message from \"../components/message\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { register } from \"../actions/userActions\";\r\nimport FormContainer from \"../components/FormContainer\";\r\n\r\n\r\nfunction RegisterScreen({ location, history }) {\r\n    const [name, setName] = useState(\"\")\r\n    const [email, setEmail] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const [confirmPassword, setConfirmPassword] = useState(\"\")\r\n    const [message, setMessage] = useState(\"\")\r\n\r\n\r\n    const redirect = location.search ? location.search.split('=')[1] : '/' \r\n    const dispatch = useDispatch()\r\n    const userRegister = useSelector(state => state.userRegister)\r\n    const {error , loading , userInfo} = userRegister\r\n  \r\n    useEffect(() => {\r\n        if(userInfo){\r\n            history.push(redirect)\r\n        }\r\n    } , [history,userInfo,redirect])\r\n  \r\n    const submitHandler = (e) => {\r\n      e.preventDefault();\r\n      if(password != confirmPassword){\r\n          setMessage(\"Passwords do not match\")\r\n      } else {\r\n        dispatch(register(name,email,password))\r\n      }\r\n     \r\n    };\r\n\r\n    return (\r\n        <FormContainer>\r\n             <h1> Sign Up </h1>\r\n    {message && <Message variant='danger'>{message}</Message>}\r\n      {error &&<Message variant='danger'>{error}</Message>}\r\n      {loading && <Loader/>}\r\n      <Form onSubmit={submitHandler}>\r\n\r\n      <Form.Group controlId=\"name\">\r\n          <Form.Label>Name</Form.Label>\r\n          <Form.Control\r\n          required\r\n            type=\"name\"\r\n            placeholder=\"Enter Name\"\r\n            value={name}\r\n            onChange={(e) => setName(e.target.value)}\r\n          ></Form.Control>\r\n        </Form.Group>\r\n\r\n        <Form.Group controlId=\"email\">\r\n          <Form.Label>Email Address</Form.Label>\r\n          <Form.Control\r\n          required\r\n            type=\"email\"\r\n            placeholder=\"Enter Email\"\r\n            value={email}\r\n            onChange={(e) => setEmail(e.target.value)}\r\n          ></Form.Control>\r\n        </Form.Group>\r\n\r\n        <Form.Group controlId=\"password\" className=\"mt-3\">\r\n          <Form.Label>Password</Form.Label>\r\n          <Form.Control\r\n          required\r\n            type=\"password\"\r\n            placeholder=\"Enter Password\"\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n          ></Form.Control>\r\n        </Form.Group>\r\n\r\n        <Form.Group controlId=\"passwordConfirm\" className=\"mt-3\">\r\n          <Form.Label>Confirm Password</Form.Label>\r\n          <Form.Control\r\n          required\r\n            type=\"password\"\r\n            placeholder=\"Confirm Password\"\r\n            value={confirmPassword}\r\n            onChange={(e) => setConfirmPassword(e.target.value)}\r\n          ></Form.Control>\r\n        </Form.Group>\r\n        <Button type=\"submit\" variant=\"primary\" className=\"mt-3\">\r\n          Register\r\n        </Button>\r\n\r\n      </Form>\r\n      <Row className=\"py-3\">\r\n        <Col>\r\n          Have an Account ?\r\n          <Link to={redirect ? `/login?redirect=${redirect}` : '/login'}>\r\n            Sign In\r\n          </Link>\r\n        </Col>\r\n      </Row>\r\n        </FormContainer>\r\n    )\r\n}\r\n\r\nexport default RegisterScreen\r\n","C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\screens\\PlaceOrderScreen.js",["191","192"],"import React, { useState, useEffect } from \"react\";\r\nimport { Button, Row, Col, ListGroup, Image, Card } from \"react-bootstrap\";\r\nimport CheckoutSteps from \"../components/CheckoutSteps\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Message from \"../components/FormContainer\";\r\nimport { createOrder } from '../actions/orderAction'\r\nimport {ORDER_CREATE_RESET} from '../constants/orderConstants'\r\n\r\nfunction PlaceOrderScreen({history}) {\r\nconst orderCreate = useSelector((state) => state.orderCreate)\r\nconst {order,error,success} = orderCreate\r\nconst dispatch = useDispatch()\r\n\r\n\r\n  const cart = useSelector((state) => state.cart);\r\n  cart.itemPrice = cart.cartItems\r\n    .reduce((acc, item) => acc + item.price * item.qty, 0)\r\n    .toFixed(2);\r\n  cart.shippingPrice = (cart.itemPrice > 100 ? 0 : 10).toFixed(2);\r\n  cart.taxPrice = Number(0.002 * cart.itemPrice).toFixed(2);\r\n  cart.totalPrice = (\r\n    Number(cart.itemPrice) +\r\n    Number(cart.shippingPrice) +\r\n    Number(cart.taxPrice)\r\n  ).toFixed(2);\r\n\r\n  if(!cart.paymentMethod){\r\n    history.push('/payment')\r\n  }\r\n\r\n  useEffect(() => {\r\n    if(success) {\r\n      history.push(`/order/${order._id}`)\r\n      dispatch({type: ORDER_CREATE_RESET})\r\n    }\r\n    \r\n  }, [success, history])\r\n\r\n  const placeOrder = () => {\r\n  dispatch(createOrder({\r\n  orderItems: cart.cartItems,\r\n  shippingAddress: cart.shippingAddress,\r\n  paymentMethod: cart.paymentMethod,\r\n  itemsPrice: cart.itemsPrice,\r\n  shippingPrice: cart.shippingPrice,\r\n  taxPrice: cart.taxPrice,\r\n  totalPrice: cart.totalPrice,\r\n\r\n}))\r\n\r\n  }\r\n  return (\r\n    <div>\r\n      <CheckoutSteps step1 step2 step3 step4 />\r\n      <Row>\r\n        <Col md={8}>\r\n          <ListGroup variant=\"flush\">\r\n            <ListGroup.Item>\r\n              <h2> Shipping </h2>\r\n              <p>\r\n                <strong>Shipping: &nbsp;</strong>\r\n                {cart.shippingAddress.address} {cart.shippingAddress.city},\r\n                {\"  \"}\r\n                {cart.shippingAddress.postalCode},{\"  \"}\r\n                {cart.shippingAddress.country}\r\n              </p>\r\n            </ListGroup.Item>\r\n\r\n            <ListGroup.Item>\r\n              <h2> Payment Method </h2>\r\n\r\n              <p>\r\n                <strong>Method: &nbsp;</strong>\r\n                {cart.paymentMethod}\r\n              </p>\r\n            </ListGroup.Item>\r\n\r\n            <ListGroup.Item>\r\n              <h2> Order Items </h2>\r\n              {cart.cartItems.length === 0 ? (\r\n                <Message variant=\"info\">Your cart is empty</Message>\r\n              ) : (\r\n                <ListGroup variant=\"flush\">\r\n                  {cart.cartItems.map((item, index) => (\r\n                    <ListGroup.Item key={index}>\r\n                      <Row>\r\n                        <Col md={1}>\r\n                          <Image\r\n                            src={item.image}\r\n                            alt={item.name}\r\n                            fluid\r\n                            rounded\r\n                          />\r\n                        </Col>\r\n\r\n                        <Col>\r\n                          <Link to={`/product/${item.product}`}>\r\n                            {item.name}\r\n                          </Link>\r\n                        </Col>\r\n                        <Col md={4}>\r\n                          {item.qty} * ${item.price} = $\r\n                          {(item.qty * item.price).toFixed(2)}\r\n                        </Col>\r\n                      </Row>\r\n                    </ListGroup.Item>\r\n                  ))}\r\n                </ListGroup>\r\n              )}\r\n            </ListGroup.Item>\r\n          </ListGroup>\r\n        </Col>\r\n        <Col md={4}>\r\n          <Card>\r\n            <ListGroup variant=\"flush\">\r\n              <ListGroup.Item>\r\n                <h2>Order Summary</h2>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>Items: </Col>\r\n                  <Col> ${cart.itemPrice}</Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>Shipping: </Col>\r\n                  <Col> ${cart.shippingPrice}</Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>Tax: </Col>\r\n                  <Col> ${cart.taxPrice}</Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>Total: </Col>\r\n                  <Col> ${cart.totalPrice}</Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n               {error && <Message variant = 'danger'> {error}</Message>}\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Button\r\n                  type=\"button\"\r\n                  className=\"btn-block\"\r\n                  disabled = {cart.cartItems === 0}\r\n                  onClick={placeOrder}\r\n                >\r\n                  Place Order\r\n                </Button>\r\n              </ListGroup.Item>\r\n            </ListGroup>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PlaceOrderScreen;\r\n","C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\screens\\ShippingScreen.js",["193"],"import React, { useState, useEffect } from \"react\";\r\nimport { Form, Button } from \"react-bootstrap\";\r\nimport CheckoutSteps from \"../components/CheckoutSteps\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport FormContainer from \"../components/FormContainer\";\r\nimport { saveShippingAddress } from \"../actions/cartActions\";\r\n\r\nfunction ShippingScreen({ history }) {\r\n  const cart = useSelector((state) => state.cart);\r\n  const { shippingAddress } = cart;\r\n\r\n  const dispatch = useDispatch();\r\n  const [address, setAddress] = useState(shippingAddress.address);\r\n  const [city, setCity] = useState(shippingAddress.city);\r\n  const [postalCode, setPostalCode] = useState(shippingAddress.postalCode);\r\n  const [country, setCountry] = useState(shippingAddress.country);\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    dispatch(saveShippingAddress({ address, city, postalCode, country }));\r\n    history.push(\"/payment\");\r\n  };\r\n\r\n  return (\r\n    <FormContainer>\r\n      <CheckoutSteps step1 step2 step3 step4/>\r\n      <h1>Shipping</h1>\r\n      <Form onSubmit={submitHandler}>\r\n        <Form.Group controlId=\"address\" className=\"mt-3\">\r\n          <Form.Label>Address</Form.Label>\r\n          <Form.Control\r\n            required\r\n            type=\"name\"\r\n            placeholder=\"Enter Address\"\r\n            value={address ? address : \"\"}\r\n            onChange={(e) => setAddress(e.target.value)}\r\n          ></Form.Control>\r\n        </Form.Group>\r\n\r\n        <Form.Group controlId=\"city \" className=\"mt-3\">\r\n          <Form.Label>City</Form.Label>\r\n          <Form.Control\r\n            required\r\n            type=\"name\"\r\n            placeholder=\"Enter City\"\r\n            value={city ? city : \"\"}\r\n            onChange={(e) => setCity(e.target.value)}\r\n          ></Form.Control>\r\n        </Form.Group>\r\n\r\n        <Form.Group controlId=\"postalCode\" className=\"mt-3\">\r\n          <Form.Label>PostalCode</Form.Label>\r\n          <Form.Control\r\n            required\r\n            type=\"name\"\r\n            placeholder=\"Enter PostalCode\"\r\n            value={postalCode ? postalCode : \"\"}\r\n            onChange={(e) => setPostalCode(e.target.value)}\r\n          ></Form.Control>\r\n        </Form.Group>\r\n\r\n        <Form.Group controlId=\"country\" className=\"mt-3\">\r\n          <Form.Label>Country</Form.Label>\r\n          <Form.Control\r\n            required\r\n            type=\"name\"\r\n            placeholder=\"Enter Country\"\r\n            value={country ? country : \"\"}\r\n            onChange={(e) => setCountry(e.target.value)}\r\n          ></Form.Control>\r\n        </Form.Group>\r\n\r\n        <Button type=\"submit\" variant=\"primary\" className=\"mt-3\">\r\n          Continue\r\n        </Button>\r\n      </Form>\r\n    </FormContainer>\r\n  );\r\n}\r\n\r\nexport default ShippingScreen;\r\n","C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\screens\\PaymentScreen.js",["194"],"import React, { useState, useEffect } from \"react\";\r\nimport { Form, Button, Col } from \"react-bootstrap\";\r\nimport CheckoutSteps from \"../components/CheckoutSteps\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport FormContainer from \"../components/FormContainer\";\r\nimport { savePaymentMethod } from \"../actions/cartActions\";\r\n\r\nfunction PaymentScreen({ history }) {\r\n  const cart = useSelector((state) => state.cart);\r\n  const { shippingAddress } = cart;\r\n\r\n  const dispatch = useDispatch();\r\n  const [paymentMethod, setPaymentMethod] = useState(\"PayPal\");\r\n\r\n  if (!shippingAddress.address) {\r\n    history.push(\"./shipping\");\r\n  }\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    dispatch(savePaymentMethod(paymentMethod));\r\n    history.push('/placeorder')\r\n  }\r\n\r\n  return (\r\n    <FormContainer>\r\n      <CheckoutSteps step1 step2 step3  />\r\n      <Form onSubmit={submitHandler}>\r\n        <Form.Group>\r\n          <Form.Label as=\"legend\">Select Method</Form.Label>\r\n          <Col>\r\n            <Form.Check type='radio'\r\n            label= 'PayPal or CreditCard'\r\n            id = 'paypal'\r\n            name = 'paymentMethod'\r\n            checked\r\n            onChange={(e) => setPaymentMethod(e.target.value)}\r\n            >\r\n\r\n            </Form.Check>\r\n          </Col>\r\n        </Form.Group>\r\n        <Button type=\"submit\" variant=\"primary\">\r\n          Continue\r\n        </Button>\r\n      </Form>\r\n    </FormContainer>\r\n  );\r\n}\r\n\r\nexport default PaymentScreen;\r\n","C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\screens\\ProfileScreen.js",["195","196"],"import React, { useState, useEffect } from \"react\";\r\nimport { Form, Button, Col, Row , Table} from \"react-bootstrap\";\r\nimport Loader from \"../components/loader\";\r\nimport Message from \"../components/message\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getUserDetails,updateUserProfile } from \"../actions/userActions\";\r\nimport { USER_UPDATE_PROFILE_RESET } from '../constants/userConstants'\r\nimport { listMyOrders } from '../actions/orderAction'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { ORDER_LIST_MY_FAIL } from \"../constants/orderConstants\";\r\n\r\nfunction ProfileScreen({ history }) {\r\n  const [name, setName] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  const dispatch = useDispatch();\r\n  const userDetails = useSelector((state) => state.userDetails);\r\n  const { error, loading, user } = userDetails;\r\n\r\n  const userLogin = useSelector((state) => state.userLogin);\r\n  const { userInfo } = userLogin;\r\n\r\n  const userUpdateProfile = useSelector((state) => state.userUpdateProfile);\r\n  const { success } = userUpdateProfile;\r\n\r\n  const orderListMy = useSelector((state) => state.orderListMy);\r\n  const { loading: loadingOrders, error: errorOrders, orders } = orderListMy\r\n  useEffect(() => {\r\n    if (!userInfo) {\r\n      history.push('/login');\r\n    } else {\r\n      if (!user || !user.name || success || userInfo._id !==user._id ) {\r\n        dispatch({type:USER_UPDATE_PROFILE_RESET})\r\n        dispatch(getUserDetails('profile'));\r\n        dispatch(listMyOrders());\r\n\r\n\r\n      } else {\r\n          setName(user.name)\r\n          setEmail(user.email)\r\n      }\r\n    }\r\n  }, [history, userInfo, dispatch, user, success]);\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    if (password != confirmPassword) {\r\n      setMessage(\"Passwords do not match\");\r\n    } else {\r\n        dispatch(updateUserProfile({'id': user._id,\r\n      'name': name,\r\n      'email': email,\r\n      'password':password\r\n      }))\r\n    }\r\n  };\r\n  return (\r\n    <Row>\r\n      <Col md={3}>\r\n        <h2>User Profile</h2>\r\n        {message && <Message variant='danger'>{message}</Message>}\r\n      {error &&<Message variant='danger'>{error}</Message>}\r\n      {loading && <Loader/>}\r\n      <Form onSubmit={submitHandler}>\r\n\r\n      <Form.Group controlId=\"name\">\r\n          <Form.Label>Name</Form.Label>\r\n          <Form.Control\r\n          required\r\n            type=\"name\"\r\n            placeholder=\"Enter Name\"\r\n            value={name}\r\n            onChange={(e) => setName(e.target.value)}\r\n          ></Form.Control>\r\n        </Form.Group>\r\n\r\n        <Form.Group controlId=\"email\">\r\n          <Form.Label>Email Address</Form.Label>\r\n          <Form.Control\r\n          required\r\n            type=\"email\"\r\n            placeholder=\"Enter Email\"\r\n            value={email}\r\n            onChange={(e) => setEmail(e.target.value)}\r\n          ></Form.Control>\r\n        </Form.Group>\r\n\r\n        <Form.Group controlId=\"password\" className=\"mt-3\">\r\n          <Form.Label>Password</Form.Label>\r\n          <Form.Control\r\n          \r\n            type=\"password\"\r\n            placeholder=\"Enter Password\"\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n          ></Form.Control>\r\n        </Form.Group>\r\n\r\n        <Form.Group controlId=\"passwordConfirm\" className=\"mt-3\">\r\n          <Form.Label>Confirm Password</Form.Label>\r\n          <Form.Control\r\n          \r\n            type=\"password\"\r\n            placeholder=\"Confirm Password\"\r\n            value={confirmPassword}\r\n            onChange={(e) => setConfirmPassword(e.target.value)}\r\n          ></Form.Control>\r\n        </Form.Group>\r\n        <Button type=\"submit\" variant=\"primary\" className=\"mt-3\">\r\n          Update\r\n        </Button>\r\n\r\n      </Form>\r\n      </Col>\r\n\r\n      <Col md={9}>\r\n        <h2>My Orders</h2>\r\n{loadingOrders ? (\r\n  <Loader />\r\n\r\n):  errorOrders ? (\r\n  <Message variant = 'danger'>{errorOrders}</Message>\r\n): (\r\n  <Table striped responsive className = 'table-sm'>\r\n<thead>\r\n<tr>\r\n  <th>ID</th>\r\n  <th>DATE</th>\r\n  <th>TOTAL</th>\r\n  <th>PAID</th>\r\n  <th>DELIVERED</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n  {orders.map(order => (\r\n    <tr key={order._id}>\r\n      <td>{order._id}</td>\r\n      <td>{order.createAt.substring(0,10)}</td>\r\n      <td>${order.totalPrice}</td>\r\n      <td>{order.isPaid ? order.paidAt.substring(0,10) :(\r\n        <i className= 'fas fa-times' style = {{color:'red'}} > </i>\r\n      ) }</td>\r\n      <td><LinkContainer to = {`/order/${order._id}`}>\r\n        <Button className = 'btn-btn-sm'>Details</Button>\r\n      </LinkContainer></td>\r\n    </tr>\r\n  ))}\r\n</tbody>\r\n  </Table>\r\n)}\r\n      </Col>\r\n    </Row>\r\n  );\r\n}\r\n\r\nexport default ProfileScreen;\r\n","C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\screens\\OrderScreen.js",["197"],"import React, { useState, useEffect } from \"react\";\r\nimport { Button, Row, Col, ListGroup, Image, Card } from \"react-bootstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { PayPalButton } from \"react-paypal-button-v2\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Message from \"../components/message\";\r\nimport Loader from \"../components/loader\";\r\nimport {\r\n  getOrderDetails,\r\n  payOrder,\r\n  deliverOrder,\r\n} from \"../actions/orderAction\";\r\nimport {\r\n  ORDER_PAY_RESET,\r\n  ORDER_DELIVER_RESET,\r\n} from \"../constants/orderConstants\";\r\n\r\nfunction OrderScreen({ match, history }) {\r\n  const orderId = match.params.id;\r\n  const [sdkReady, setSdkReady] = useState(false)\r\n  const dispatch = useDispatch();\r\n\r\n  const orderDetails = useSelector((state) => state.orderDetails);\r\n  const { order, error, loading } = orderDetails;\r\n  const orderPay = useSelector((state) => state.orderPay);\r\n  const { loading: loadingPay, success: successPay } = orderPay;\r\n\r\n  const orderDeliver = useSelector((state) => state.orderDeliver);\r\n  const { success: successDeliver, loading: loadingDeliver } = orderDeliver;\r\n\r\n  const userLogin = useSelector((state) => state.userLogin);\r\n  const { userInfo } = userLogin;\r\n\r\n  if (!loading && !error) {\r\n    order.itemPrice = order.orderItems\r\n      .reduce((acc, item) => acc + item.price * item.qty, 0)\r\n      .toFixed(2);\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!userInfo) {\r\n      history.push(\"/login\");\r\n    }\r\n    if (\r\n      !order ||\r\n      successPay ||\r\n      order._id !== Number(orderId) ||\r\n      successDeliver\r\n    ) {\r\n      dispatch({ type: ORDER_PAY_RESET });\r\n      dispatch({ type: ORDER_DELIVER_RESET });\r\n\r\n      dispatch(getOrderDetails(orderId));\r\n    } else if (!order.isPaid) {\r\n      if (!window.paypal) {\r\n        addPayPalScript();\r\n      } else {\r\n        setSdkReady(true);\r\n      }\r\n    }\r\n  }, [dispatch, order, orderId, successPay, successDeliver]);\r\n\r\n  const addPayPalScript = () => {\r\n    const script = document.createElement(\"script\");\r\n    script.type = \"text/javascript\";\r\n    script.src =\r\n      \"https://www.paypal.com/sdk/js?client-id=AeDXja18CkwFUkL-HQPySbzZsiTrN52cG13mf9Yz7KiV2vNnGfTDP0wDEN9sGlhZHrbb_USawcJzVDgn\";\r\n    script.async = true;\r\n    script.onload = () => {\r\n      setSdkReady(true);\r\n    };\r\n    document.body.appendChild(script);\r\n  };\r\n  const successPaymentHandler = (paymentResult) => {\r\n    dispatch(payOrder(orderId, paymentResult));\r\n  };\r\n\r\n  const deliverHandler = () => {\r\n    dispatch(deliverOrder(order));\r\n  };\r\n\r\n  return loading ? (\r\n    <Loader />\r\n  ) : error ? (\r\n    <Message variant=\"danger\">{error}</Message>\r\n  ) : (\r\n    <div>\r\n      <h1>Order: {order._id}</h1>\r\n      <Row>\r\n        <Col md={8}>\r\n          <ListGroup variant=\"flush\">\r\n            <ListGroup.Item>\r\n              <h2> Shipping </h2>\r\n              <p>\r\n                <strong>Name : </strong> {order.user.name}\r\n              </p>\r\n              <p>\r\n                <strong>Email : </strong>\r\n                <a href={`mailTo:${order.user.email}`}>{order.user.email}</a>\r\n              </p>\r\n\r\n              <p>\r\n                <strong>Shipping: &nbsp;</strong>\r\n                {order.shippingAddress.address} {order.shippingAddress.city},\r\n                {\"  \"}\r\n                {order.shippingAddress.postalCode},{\"  \"}\r\n                {order.shippingAddress.country}\r\n              </p>\r\n              {order.isDelivered ? (\r\n                <Message variant=\"success\">\r\n                  {\" \"}\r\n                  Delivered on {order.deliveredAt.substring(0, 19)}\r\n                </Message>\r\n              ) : (\r\n                <Message variant=\"warning\"> Not Delivered</Message>\r\n              )}\r\n            </ListGroup.Item>\r\n\r\n            <ListGroup.Item>\r\n              <h2> Payment Method </h2>\r\n\r\n              <p>\r\n                <strong>Method: &nbsp;</strong>\r\n                {order.paymentMethod}\r\n              </p>\r\n              {order.isPaid ? (\r\n                <Message variant=\"success\">\r\n                  {\" \"}\r\n                  Paid on {order.paidAt.substring(0, 19)}\r\n                </Message>\r\n              ) : (\r\n                <Message variant=\"warning\"> Not Paid</Message>\r\n              )}\r\n            </ListGroup.Item>\r\n\r\n            <ListGroup.Item>\r\n              <h2> Order Items </h2>\r\n              {order.orderItems.length === 0 ? (\r\n                <Message variant=\"info\">Order is empty</Message>\r\n              ) : (\r\n                <ListGroup variant=\"flush\">\r\n                  {order.orderItems.map((item, index) => (\r\n                    <ListGroup.Item key={index}>\r\n                      <Row>\r\n                        <Col md={1}>\r\n                          <Image\r\n                            src={item.image}\r\n                            alt={item.name}\r\n                            fluid\r\n                            rounded\r\n                          />\r\n                        </Col>\r\n\r\n                        <Col>\r\n                          <Link to={`/product/${item.product}`}>\r\n                            {item.name}\r\n                          </Link>\r\n                        </Col>\r\n                        <Col md={4}>\r\n                          {item.qty} * ${item.price} = $\r\n                          {(item.qty * item.price).toFixed(2)}\r\n                        </Col>\r\n                      </Row>\r\n                    </ListGroup.Item>\r\n                  ))}\r\n                </ListGroup>\r\n              )}\r\n            </ListGroup.Item>\r\n          </ListGroup>\r\n        </Col>\r\n        <Col md={4}>\r\n          <Card>\r\n            <ListGroup variant=\"flush\">\r\n              <ListGroup.Item>\r\n                <h2>Order Summary</h2>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>Items: </Col>\r\n                  <Col> ${order.itemPrice}</Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>Shipping: </Col>\r\n                  <Col> ${order.shippingPrice}</Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>Tax: </Col>\r\n                  <Col> ${order.taxPrice}</Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>Total: </Col>\r\n                  <Col> ${order.totalPrice}</Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              {!order.isPaid && (\r\n                <ListGroup.Item>\r\n                  {loadingPay && <Loader />}\r\n                  {!sdkReady ? (\r\n                    <Loader />\r\n                  ) : (\r\n                    <PayPalButton\r\n                      amount={order.totalPrice}\r\n                      onSuccess={successPaymentHandler}\r\n                    />\r\n                  )}\r\n                </ListGroup.Item>\r\n              )}\r\n            </ListGroup>\r\n            {loadingDeliver && <Loader />}\r\n            {userInfo &&\r\n              userInfo.isAdmin &&\r\n              order.isPaid &&\r\n              !order.isDelivered && (\r\n                <ListGroup.Item>\r\n                  <Button\r\n                    type=\"button\"\r\n                    className=\"btn btn-block\"\r\n                    onClick={deliverHandler}\r\n                  >\r\n                    Mark As Deliver\r\n                  </Button>\r\n                </ListGroup.Item>\r\n              )}\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default OrderScreen;\r\n","C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\screens\\OrderListScreen.js",["198","199","200"],"import React, { useState, useEffect } from \"react\";\r\nimport { LinkContainer } from \"react-router-bootstrap\";\r\nimport { Table, Button } from \"react-bootstrap\";\r\nimport Loader from \"../components/loader\";\r\nimport Message from \"../components/message\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {  listOrders ,deleteOrder} from \"../actions/orderAction\";\r\n\r\nfunction OrderListScreen({history}) {\r\n  const dispatch = useDispatch();\r\n  const orderList = useSelector((state) => state.orderList);\r\n\r\n  const { loading, error, orders } = orderList;\r\n  const userLogin = useSelector((state) => state.userLogin);\r\n\r\n  const { userInfo } = userLogin;\r\n  const orderDelete = useSelector((state) => state.orderDelete);\r\n  const {\r\n    loading: loadingDelete,\r\n    error: errorDelete,\r\n    success: successDelete,\r\n  } = orderDelete;\r\n  \r\n  const deleteHandler = (id) => {\r\n    if (window.confirm(\"Are you sure you want to delete ? \")) {\r\n      dispatch(deleteOrder(id));\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if(userInfo && userInfo.isAdmin){\r\n      dispatch(listOrders());\r\n\r\n    }else {\r\n      history.push('/login')\r\n    }\r\n  }, [dispatch,history,userInfo,successDelete]);\r\n\r\n \r\n\r\n  return (\r\n    <div>\r\n      <h1>Orders</h1>\r\n      {loading ? (\r\n        <Loader />\r\n      ) : error ? (\r\n        <Message variant=\"red\">{error}</Message>\r\n      ) : (\r\n        <Table striped bordered hover responsive className=\"table-sm\">\r\n          <thead>\r\n            <tr>\r\n              <th>ID</th>\r\n              <th>USER</th>\r\n              <th>DATE</th>\r\n              <th>TOTAL PRICE</th>\r\n              <th>PAID</th>\r\n              <th>DELIVERED</th>\r\n              <th></th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {orders.map((order) => (\r\n              <tr key={order._id}>\r\n                <td>{order._id}</td>\r\n                <td>{order.user && order.user.name}</td>\r\n                <td>{order.createAt.substring(0,10)}</td>\r\n                <td>{order.totalPrice}</td>\r\n                <td> {order.isPaid ? (\r\n                    order.paidAt.substring(0,10)\r\n                ): (\r\n                    <i className='fas fa-check' style = {{color : 'red'}}></i>\r\n                )}</td>\r\n                <td> {order.isDelivered ? (\r\n                    order.deliveredAt.substring(0,10)\r\n                ): (\r\n                    <i className='fas fa-check' style = {{color : 'red'}}></i>\r\n                )}</td>\r\n                <td>\r\n                  <LinkContainer to={`/order/${order._id}`}>\r\n                    <Button variant=\"light\" className=\"btn-sm\">\r\n                    Details\r\n                    </Button>\r\n                    \r\n                  </LinkContainer>\r\n                  </td>\r\n                  <td>\r\n                  <Button\r\n                    variant=\"danger\"\r\n                    className=\"btn-sm\"\r\n                    onClick={() => deleteHandler(order._id)}\r\n                  >\r\n                    <i className=\"fas fa-trash\"></i>\r\n                  </Button>\r\n                </td>\r\n                  \r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </Table>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default OrderListScreen;\r\n","C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\screens\\UserEditScreen.js",["201"],"import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Form, Button } from \"react-bootstrap\";\r\nimport Loader from \"../components/loader\";\r\nimport Message from \"../components/message\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getUserDetails , updateUser} from \"../actions/userActions\";\r\nimport FormContainer from \"../components/FormContainer\";\r\nimport { USER_UPDATE_RESET } from '../constants/userConstants'\r\n\r\nfunction UserEditScreen({ match, history }) {\r\n  const userId = match.params.id;\r\n  const [name, setName] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [isAdmin, setIsAdmin] = useState(false);\r\n\r\n  const dispatch = useDispatch();\r\n  const userDetails = useSelector((state) => state.userDetails);\r\n  const { error, loading, user } = userDetails;\r\n\r\n  const userUpdate = useSelector((state) => state.userUpdate);\r\n  const { error:errorUpdate, loading:loadingUpdate, success:successUpdate } = userUpdate\r\n\r\n  useEffect(() => {\r\n      if(successUpdate){\r\n        dispatch({type: USER_UPDATE_RESET})\r\n        history.push('/admin/userlist')\r\n      } else {\r\n\r\n        if (!user.name || user._id !== Number(userId)){\r\n          dispatch(getUserDetails(userId))\r\n          } else {\r\n              setName(user.name)\r\n              setEmail(user.email)\r\n              setIsAdmin(user.isAdmin)\r\n          }\r\n        }\r\n\r\n  }, [user,userId,successUpdate,history])\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    dispatch(updateUser({'_id': user._id,\r\n    'name': name,\r\n    'email': email,\r\n    'isAdmin': isAdmin\r\n  }))\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Link to=\"/admin/userlist\">Go Back</Link>\r\n      <FormContainer>\r\n        <h1> Edit User</h1>\r\n        { loadingUpdate && <Loader/>}\r\n        {errorUpdate && <Message variant='danger'>{errorUpdate}</Message>}\r\n        {loading ? (\r\n          <Loader />\r\n        ) : error ? (\r\n          <Message variant=\"danger\">{error}</Message>\r\n        ) : (\r\n          <Form onSubmit={submitHandler}>\r\n            <Form.Group controlId=\"name\">\r\n              <Form.Label>Name</Form.Label>\r\n              <Form.Control\r\n                type=\"name\"\r\n                placeholder=\"Enter Name\"\r\n                value={name}\r\n                onChange={(e) => setName(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"email\">\r\n              <Form.Label>Email Address</Form.Label>\r\n              <Form.Control\r\n                type=\"email\"\r\n                placeholder=\"Enter Email\"\r\n                value={email}\r\n                onChange={(e) => setEmail(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"isAdmin\">\r\n              <Form.Check\r\n                type = \"checkbox\"\r\n                label = 'Is Admin'\r\n                checked={isAdmin}\r\n                onChange={(e) => setIsAdmin(e.target.checked)}\r\n              ></Form.Check>\r\n            </Form.Group>\r\n\r\n            <Button type=\"submit\" variant=\"primary\" className=\"mt-3\">\r\n              Update\r\n            </Button>\r\n          </Form>\r\n        )}\r\n      </FormContainer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UserEditScreen;\r\n","C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\screens\\ProductListScreen.js",["202"],"import React, { useState, useEffect } from \"react\";\r\nimport { LinkContainer } from \"react-router-bootstrap\";\r\nimport { Table, Button, Row, Col } from \"react-bootstrap\";\r\nimport Loader from \"../components/loader\";\r\nimport Message from \"../components/message\";\r\nimport Paginate from \"../components/Paginate\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  listProducts,\r\n  deleteProduct,\r\n  createProduct,\r\n} from \"../actions/productActions\";\r\nimport { PRODUCT_CREATE_RESET } from \"../constants/productConstants\";\r\nfunction ProductListScreen({ history, match }) {\r\n  const dispatch = useDispatch();\r\n\r\n  const productList = useSelector((state) => state.productList);\r\n  const { loading, error, products ,page,pages} = productList;\r\n\r\n  const productDelete = useSelector((state) => state.productDelete);\r\n  const {\r\n    loading: loadingDelete,\r\n    error: errorDelete,\r\n    success: successDelete,\r\n  } = productDelete;\r\n\r\n  const productCreate = useSelector((state) => state.productCreate);\r\n  const {\r\n    loading: loadingCreate,\r\n    error: errorCreate,\r\n    success: successCreate,\r\n    product: createdProduct,\r\n  } = productCreate;\r\n\r\n  const userLogin = useSelector((state) => state.userLogin);\r\n  const { userInfo } = userLogin;\r\n\r\n  let keyword = history.location.search\r\n\r\n  useEffect(() => {\r\n    dispatch({ type: PRODUCT_CREATE_RESET });\r\n\r\n    if (!userInfo.isAdmin) {\r\n      history.push(\"/login\");\r\n    }\r\n    if (successCreate) {\r\n      history.push(`/admin/product/${createdProduct._id}/edit`);\r\n    } else {\r\n      dispatch(listProducts(keyword));\r\n    }\r\n  }, [\r\n    dispatch,\r\n    history,\r\n    userInfo,\r\n    successDelete,\r\n    successCreate,\r\n    createdProduct,\r\n    keyword\r\n  ]);\r\n\r\n  const deleteHandler = (id) => {\r\n    if (window.confirm(\"Are you sure you want to delete ? \")) {\r\n      dispatch(deleteProduct(id));\r\n    }\r\n  };\r\n  const CreateProductHandler = () => {\r\n    dispatch(createProduct());\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Row className=\"align-items-center\">\r\n        <Col>\r\n          <h1>Products</h1>\r\n        </Col>\r\n        <Col className=\"text-center\">\r\n          <Button className=\"\" onClick={CreateProductHandler}>\r\n            <i className=\"fa fa-plus\"> </i> Create Product\r\n          </Button>\r\n        </Col>\r\n      </Row>\r\n      {loadingDelete && <Loader />}\r\n      {errorDelete && <Message variant=\"red\">{errorDelete}</Message>}\r\n\r\n      {loadingCreate && <Loader />}\r\n      {errorCreate && <Message variant=\"red\">{errorCreate}</Message>}\r\n\r\n      {loading ? (\r\n        <Loader />\r\n      ) : error ? (\r\n        <Message variant=\"red\">{error}</Message>\r\n      ) : (\r\n        <div>\r\n        <Table striped bordered hover responsive className=\"table-sm\">\r\n          <thead>\r\n            <tr>\r\n              <th>ID</th>\r\n              <th>NAME</th>\r\n              <th>PRICE</th>\r\n              <th>CATEGORY</th>\r\n              <th>BRAND</th>\r\n              <th></th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {products.map((product) => (\r\n              <tr key={product._id}>\r\n                <td>{product._id}</td>\r\n                <td>{product.name}</td>\r\n                <td>${product.price}</td>\r\n                <td>{product.category} </td>\r\n                <td>{product.brand} </td>\r\n\r\n                <td>\r\n                  <LinkContainer to={`/admin/product/${product._id}/edit`}>\r\n                    <Button variant=\"light\" className=\"btn-sm\">\r\n                      <i className=\"fas fa-edit\"></i>\r\n                      Edit\r\n                    </Button>\r\n                  </LinkContainer>\r\n                </td>\r\n                <td>\r\n                  <Button\r\n                    variant=\"danger\"\r\n                    className=\"btn-sm\"\r\n                    onClick={() => deleteHandler(product._id)}\r\n                  >\r\n                    <i className=\"fas fa-trash\"></i>\r\n                  </Button>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </Table>\r\n        <Paginate pages={pages} page = {page} isAdmin = {true}></Paginate>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProductListScreen;\r\n","C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\screens\\UserListScreen.js",["203"],"import React, { useState, useEffect } from \"react\";\r\nimport { LinkContainer } from \"react-router-bootstrap\";\r\nimport { Table, Button } from \"react-bootstrap\";\r\nimport Loader from \"../components/loader\";\r\nimport Message from \"../components/message\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { listUsers , deleteUser} from \"../actions/userActions\";\r\n\r\nfunction UserListScreen({history}) {\r\n  const dispatch = useDispatch();\r\n  const userList = useSelector((state) => state.userList);\r\n\r\n  const { loading, error, users } = userList;\r\n  const userLogin = useSelector((state) => state.userLogin);\r\n\r\n  const { userInfo } = userLogin;\r\n  const userDelete = useSelector((state) => state.userDelete);\r\n\r\n  const { success : successDelete } = userDelete;\r\n\r\n  useEffect(() => {\r\n    if(userInfo && userInfo.isAdmin){\r\n      dispatch(listUsers());\r\n\r\n    }else {\r\n      history.push('/login')\r\n    }\r\n  }, [dispatch,history, successDelete,userInfo]);\r\n\r\n  const deleteHandler = (id) => {\r\n    if(window.confirm('Are you sure you want to delete ? ')) {\r\n      dispatch(deleteUser(id))\r\n\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Users</h1>\r\n      {loading ? (\r\n        <Loader />\r\n      ) : error ? (\r\n        <Message variant=\"red\">{error}</Message>\r\n      ) : (\r\n        <Table striped bordered hover responsive className=\"table-sm\">\r\n          <thead>\r\n            <tr>\r\n              <th>ID</th>\r\n              <th>NAME</th>\r\n              <th>EMAIL</th>\r\n              <th>ADMIN</th>\r\n              <th>EDIT</th>\r\n              <th>DELETE</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {users.map((user) => (\r\n              <tr key={user._id}>\r\n                <td>{user._id}</td>\r\n                <td>{user.name}</td>\r\n                <td>{user.email}</td>\r\n                <td>\r\n                  {user.isAdmin ? (\r\n                    <i className=\"fas fa-check\" style={{ color: \"green\" }}></i>\r\n                  ) : (\r\n                    <i className=\"fas fa-check\" style={{ color: \"red\" }}></i>\r\n                  )}\r\n                </td>\r\n                <td>\r\n                  <LinkContainer to={`/admin/user/${user._id}/edit`}>\r\n                    <Button variant=\"light\" className=\"btn-sm\">\r\n                      <i className=\"fas fa-edit\"></i>\r\n                      Edit\r\n                    </Button>\r\n                    \r\n                  </LinkContainer>\r\n                  </td>\r\n                  <td>\r\n                  <Button variant=\"danger\" className=\"btn-sm\" onClick ={() => deleteHandler(user._id) } >\r\n                      <i className=\"fas fa-trash\"></i>\r\n                      \r\n                    </Button>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </Table>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UserListScreen;\r\n","C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\components\\footer.js",[],"C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\components\\header.js",["204"],"import React from \"react\";\r\nimport { Navbar, Nav, Container, Row, NavDropdown } from \"react-bootstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { LinkContainer } from \"react-router-bootstrap\";\r\nimport { logout } from \"../actions/userActions\";\r\nimport SearchBox from \"./SearchBox\";\r\nfunction Header() {\r\n  const userLogin = useSelector((state) => state.userLogin);\r\n  const { userInfo } = userLogin;\r\n  const dispatch = useDispatch();\r\n  const logoutHandler = () => {\r\n    dispatch(logout());\r\n  };\r\n  return (\r\n    <header>\r\n      <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\" collapseOnSelect>\r\n        <Container fluid>\r\n        <LinkContainer to=\"/\">\r\n            <Navbar.Brand className=\"ms-60\">Ecommerce Website</Navbar.Brand>\r\n          </LinkContainer>\r\n          <Navbar.Toggle aria-controls=\"navbarScroll\" />\r\n          <Navbar.Collapse id=\"navbarScroll\">\r\n          <SearchBox />\r\n            <Nav\r\n              className=\"ms-auto\"\r\n              style={{ maxHeight: \"10px !important\"  }}\r\n              navbarScroll\r\n            >\r\n               <LinkContainer to=\"/cart\">\r\n                <Nav.Link>\r\n                  <i className=\"fas fa-shopping-cart \"></i>Cart\r\n                </Nav.Link>\r\n              </LinkContainer>\r\n              {userInfo ? (\r\n                <NavDropdown title={userInfo.name} id=\"username\">\r\n                  <LinkContainer to=\"/profile\">\r\n                    <NavDropdown.Item>profile</NavDropdown.Item>\r\n                  </LinkContainer>\r\n                  <NavDropdown.Item onClick={logoutHandler}>\r\n                    Logout\r\n                  </NavDropdown.Item>\r\n                </NavDropdown>\r\n              ) : (\r\n                <LinkContainer to=\"/login\">\r\n                  <Nav.Link>\r\n                    <i className=\"fas fa-user \"></i>login\r\n                  </Nav.Link>\r\n                </LinkContainer>\r\n              )}\r\n              {userInfo && userInfo.isAdmin && (\r\n                <NavDropdown title=\"Admin\" id=\"adminmenue\">\r\n                  <LinkContainer to=\"/admin/userlist\">\r\n                    <NavDropdown.Item>User</NavDropdown.Item>\r\n                  </LinkContainer>\r\n                  <LinkContainer to=\"/admin/productlist\">\r\n                    <NavDropdown.Item>Product</NavDropdown.Item>\r\n                  </LinkContainer>\r\n                  <LinkContainer to=\"/admin/orderlist\">\r\n                    <NavDropdown.Item>Order</NavDropdown.Item>\r\n                  </LinkContainer>\r\n                </NavDropdown>\r\n              )}\r\n              \r\n\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n        </Container>\r\n      </Navbar>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\screens\\ProductEditScreen.js",["205"],"import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Form, Button } from \"react-bootstrap\";\r\nimport Loader from \"../components/loader\";\r\nimport Message from \"../components/message\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { listProductsDetails, updateProduct } from \"../actions/productActions\";\r\nimport FormContainer from \"../components/FormContainer\";\r\nimport { PRODUCT_UPDATE_RESET } from \"../constants/productConstants\";\r\nimport axios from 'axios'\r\n\r\nfunction ProductEditScreen({ match, history }) {\r\n  const productId = match.params.id;\r\n  const [name, setName] = useState(\"\");\r\n  const [price, setPrice] = useState(0);\r\n  const [images, setImages] = useState(\"\");\r\n  const [brand, setBrand] = useState(\"\");\r\n  const [category, setCategory] = useState(\"\");\r\n  const [countInStock, setCountInStock] = useState(0);\r\n  const [description, setDescription] = useState(\"\");\r\n  const [uploading, setUploading] = useState(false);\r\n\r\n  const dispatch = useDispatch();\r\n  const productDetails = useSelector((state) => state.productDetails);\r\n  const { error, loading, product } = productDetails;\r\n\r\n  const productUpdate = useSelector((state) => state.productUpdate);\r\n  const {\r\n    error: errorUpdate,\r\n    loading: loadingUpdate,\r\n    success: successUpdate,\r\n  } = productUpdate;\r\n\r\n  useEffect(() => {\r\n    if (successUpdate) {\r\n      dispatch({ type: PRODUCT_UPDATE_RESET });\r\n      history.push(\"/admin/productlist\");\r\n    } else {\r\n      if (!product.name || product._id !== Number(productId)) {\r\n        dispatch(listProductsDetails(productId));\r\n      } else {\r\n        setName(product.name);\r\n        setPrice(product.price);\r\n        setImages(product.images);\r\n        setBrand(product.brand);\r\n        setCategory(product.category);\r\n        setCountInStock(product.countInStock);\r\n        setDescription(product.description);\r\n      }\r\n    }\r\n  }, [product, productId, history, dispatch, successUpdate]);\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    dispatch(\r\n      updateProduct({\r\n        _id: productId,\r\n        name: name,\r\n        price: price,\r\n        images: images,\r\n        brand: brand,\r\n        category: category,\r\n        countInStock: countInStock,\r\n        description: description,\r\n      })\r\n    );\r\n  };\r\n\r\n  const uploadFileHandler = async (e) => {\r\n    const file = e.target.files[0]\r\n    const formData = new FormData()\r\n    formData.append('images', file)\r\n    formData.append('product_id', productId)\r\n    setUploading(true)\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        }\r\n      }\r\n      const { data } = await axios.post('/api/products/upload/',\r\n        formData,\r\n        config\r\n      );\r\n      setImages(data)\r\n      setUploading(false)\r\n    } catch (error) {\r\n      setUploading(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Link to=\"/admin/productlist\">Go Back</Link>\r\n      <FormContainer>\r\n        <h1> Edit Product</h1>\r\n        {loadingUpdate && <Loader />}\r\n        {errorUpdate && <Message variant=\"danger\">{errorUpdate}</Message>}\r\n\r\n        {loading ? (\r\n          <Loader />\r\n        ) : error ? (\r\n          <Message variant=\"danger\">{error}</Message>\r\n        ) : (\r\n          <Form onSubmit={submitHandler}>\r\n            <Form.Group controlId=\"name\">\r\n              <Form.Label>Name</Form.Label>\r\n              <Form.Control\r\n                type=\"name\"\r\n                placeholder=\"Enter Name\"\r\n                value={name}\r\n                onChange={(e) => setName(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"price\">\r\n              <Form.Label>Price</Form.Label>\r\n\r\n              <Form.Control\r\n                type=\"number\"\r\n                placeholder=\"Enter Price\"\r\n                value={price}\r\n                onChange={(e) => setPrice(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n\r\n            \r\n            <Form.Group controlId=\"image\">\r\n            <Form.Label>Images</Form.Label>\r\n\r\n\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Enter image\"\r\n                value={images}\r\n                onChange={(e) => setImages(e.target.value)}\r\n              ></Form.Control>\r\n              <label>\r\n          images\r\n          </label>\r\n          <input\r\n            name=\"images\"\r\n            type=\"file\"\r\n            onChange={uploadFileHandler} />\r\n        \r\n         \r\n            </Form.Group>\r\n           \r\n            <Form.Group controlId=\"brand\">\r\n              <Form.Label>Brand</Form.Label>\r\n\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Enter Brand\"\r\n                value={brand}\r\n                onChange={(e) => setBrand(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"countInStock\">\r\n              <Form.Label>Stock</Form.Label>\r\n\r\n              <Form.Control\r\n                type=\"number\"\r\n                placeholder=\"Enter CountinStock\"\r\n                value={countInStock}\r\n                onChange={(e) => setCountInStock(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"category\">\r\n              <Form.Label>Category</Form.Label>\r\n\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Enter Category\"\r\n                value={category}\r\n                onChange={(e) => setCategory(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"Description\">\r\n              <Form.Label>Description</Form.Label>\r\n\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Enter Description\"\r\n                value={description}\r\n                onChange={(e) => setDescription(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n\r\n            <Button type=\"submit\" variant=\"primary\" className=\"mt-3\">\r\n              Update\r\n            </Button>\r\n          </Form>\r\n        )}\r\n      </FormContainer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProductEditScreen;\r\n","C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\components\\loader.js",[],"C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\components\\message.js",[],"C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\components\\FormContainer.js",["206"],"import React, { Children } from 'react'\r\nimport { Container , Row , Col } from 'react-bootstrap'\r\n\r\nfunction FormContainer({children}) {\r\n    return (\r\n        <Container>\r\n            <Row className = \"justify-content-md-center \" >\r\n                <Col xs = {12} md = {6} >\r\n                    {children}\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default FormContainer\r\n","C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\components\\ProductCarousel.js",[],"C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\components\\Rating.js",[],"C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\components\\Product.js",[],"C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\components\\CheckoutSteps.js",[],"C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\components\\Paginate.js",[],"C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\constants\\cartConstants.js",[],"C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\constants\\userConstants.js",[],"C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\constants\\productConstants.js",[],"C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\constants\\orderConstants.js",[],"C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\actions\\userActions.js",["207","208"],"import axios from \"axios\";\r\nimport {\r\n  USER_LOGIN_REQUEST,\r\n  USER_LOGIN_SUCCESS,\r\n  USER_LOGIN_FAIL,\r\n  USER_LOGOUT,\r\n  USER_REGISTER_REQUEST,\r\n  USER_REGISTER_SUCCESS,\r\n  USER_REGISTER_FAIL,\r\n  USER_DETAILS_REQUEST,\r\n  USER_DETAILS_SUCCESS,\r\n  USER_DETAILS_FAIL,\r\n  USER_DETAILS_RESET,\r\n  USER_UPDATE_PROFILE_REQUEST,\r\n  USER_UPDATE_PROFILE_SUCCESS,\r\n  USER_UPDATE_PROFILE_FAIL,\r\n  USER_UPDATE_PROFILE_RESET,\r\n  USER_LIST_REQUEST,\r\n  USER_LIST_SUCCESS,\r\n  USER_LIST_FAIL,\r\n  USER_LIST_RESET,\r\n  USER_UPDATE_REQUEST,\r\n  USER_UPDATE_SUCCESS,\r\n  USER_UPDATE_FAIL,\r\n  USER_UPDATE_RESET,\r\n  USER_DELETE_REQUEST,\r\n  USER_DELETE_SUCCESS,\r\n  USER_DELETE_FAIL,\r\n} from \"../constants/userConstants\";\r\n\r\nimport { ORDER_LIST_MY_RESET } from \"../constants/orderConstants\";\r\nexport const login = (email, password) => async (dispatch) => {\r\n  try {\r\n    dispatch({\r\n      type: USER_LOGIN_REQUEST,\r\n    });\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    const { data } = await axios.post(\r\n      \"api/users/login/\",\r\n      { username: email, password: password },\r\n      config\r\n    );\r\n    dispatch({\r\n      type: USER_LOGIN_SUCCESS,\r\n      payload: data,\r\n    });\r\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n  } catch (error) {\r\n    dispatch({\r\n      type: USER_LOGIN_FAIL,\r\n      payload:\r\n        error.response && error.response.data.detail\r\n          ? error.response.data.detail\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const logout = () => (dispatch) => {\r\n  localStorage.removeItem(\"userInfo\");\r\n  dispatch({ type: USER_LOGOUT });\r\n  dispatch({ type: USER_DETAILS_RESET });\r\n  dispatch({ type: ORDER_LIST_MY_RESET });\r\n  dispatch({ type: USER_LIST_RESET });\r\n};\r\n\r\nexport const register = (name, email, password) => async (dispatch) => {\r\n  try {\r\n    dispatch({\r\n      type: USER_REGISTER_REQUEST,\r\n    });\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    const { data } = await axios.post(\r\n      \"api/users/register/\",\r\n      { name: name, email: email, password: password },\r\n      config\r\n    );\r\n    dispatch({\r\n      type: USER_REGISTER_SUCCESS,\r\n      payload: data,\r\n    });\r\n\r\n    dispatch({\r\n      type: USER_LOGIN_SUCCESS,\r\n      payload: data,\r\n    });\r\n\r\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n  } catch (error) {\r\n    dispatch({\r\n      type: USER_REGISTER_FAIL,\r\n      payload:\r\n        error.response && error.response.data.detail\r\n          ? error.response.data.detail\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const getUserDetails = (id) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({\r\n      type: USER_DETAILS_REQUEST,\r\n    });\r\n\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState();\r\n\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    };\r\n\r\n    const { data } = await axios.get(\r\n      `/api/users/${id}/`,\r\n\r\n      config\r\n    );\r\n\r\n    dispatch({\r\n      type: USER_DETAILS_SUCCESS,\r\n      payload: data,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: USER_DETAILS_FAIL,\r\n      payload:\r\n        error.response && error.response.data.detail\r\n          ? error.response.data.detail\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\nexport const updateUserProfile = (user) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({\r\n      type: USER_UPDATE_PROFILE_REQUEST,\r\n    });\r\n\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState();\r\n\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    };\r\n\r\n    const { data } = await axios.put(`api/users/profile/update/`, user, config);\r\n\r\n    dispatch({\r\n      type: USER_UPDATE_PROFILE_SUCCESS,\r\n      payload: data,\r\n    });\r\n    dispatch({\r\n      type: USER_LOGIN_SUCCESS,\r\n      payload: data,\r\n    });\r\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n  } catch (error) {\r\n    dispatch({\r\n      type: USER_UPDATE_PROFILE_FAIL,\r\n      payload:\r\n        error.response && error.response.data.detail\r\n          ? error.response.data.detail\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const listUsers = () => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({\r\n      type: USER_LIST_REQUEST,\r\n    });\r\n\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState();\r\n\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    };\r\n\r\n    const { data } = await axios.get(`/api/users/`, config);\r\n\r\n    dispatch({\r\n      type: USER_LIST_SUCCESS,\r\n      payload: data,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: USER_LIST_FAIL,\r\n      payload:\r\n        error.response && error.response.data.detail\r\n          ? error.response.data.detail\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\nexport const deleteUser = (id) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({\r\n      type: USER_DELETE_REQUEST,\r\n    });\r\n\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState();\r\n\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    };\r\n\r\n    const { data } = await axios.delete(`/api/users/delete/${id}/`, config);\r\n\r\n    dispatch({\r\n      type: USER_DELETE_SUCCESS,\r\n      payload: data,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: USER_DELETE_FAIL,\r\n      payload:\r\n        error.response && error.response.data.detail\r\n          ? error.response.data.detail\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const updateUser = (user) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({\r\n      type: USER_UPDATE_REQUEST,\r\n    });\r\n\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState();\r\n\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    };\r\n\r\n    const { data } = await axios.put(\r\n      `/api/users/update/${user._id}/`\r\n      ,user\r\n      , config)\r\n\r\n    dispatch({\r\n      type: USER_UPDATE_SUCCESS,\r\n\r\n    })\r\n\r\n    dispatch({\r\n      type: USER_DETAILS_SUCCESS,\r\n      payload: data,\r\n    })\r\n\r\n  } catch (error) {\r\n    dispatch({\r\n      type: USER_UPDATE_FAIL,\r\n      payload:\r\n        error.response && error.response.data.detail\r\n          ? error.response.data.detail\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n","C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\actions\\orderAction.js",["209"],"import {\r\n     ORDER_CREATE_REQUEST, \r\n     ORDER_CREATE_SUCCESS ,\r\n     ORDER_CREATE_FAIL ,\r\n\r\n     ORDER_DETAILS_REQUEST,\r\n     ORDER_DETAILS_SUCCESS,\r\n     ORDER_DETAILS_FAIL,\r\n\r\n     ORDER_PAY_REQUEST,\r\n     ORDER_PAY_SUCCESS,\r\n     ORDER_PAY_FAIL,\r\n\r\n     ORDER_LIST_MY_REQUEST,\r\n     ORDER_LIST_MY_SUCCESS,\r\n     ORDER_LIST_MY_FAIL,\r\n     \r\n     ORDER_LIST_REQUEST,\r\n     ORDER_LIST_SUCCESS,\r\n     ORDER_LIST_FAIL,\r\n\r\n     ORDER_DELIVER_REQUEST,\r\n     ORDER_DELIVER_SUCCESS,\r\n     ORDER_DELIVER_FAIL,\r\n\r\n     ORDER_DELETE_REQUEST,\r\n     ORDER_DELETE_SUCCESS,\r\n     ORDER_DELETE_FAIL,\r\n\r\n} from '../constants/orderConstants'\r\nimport axios from 'axios'\r\nimport { CART_CLEAR_ITEMS } from '../constants/cartConstants'\r\n\r\nexport const createOrder = (order) => async (dispatch, getState) => {\r\n    try {\r\n      dispatch({\r\n        type: ORDER_CREATE_REQUEST,\r\n      });\r\n  \r\n      const {\r\n        userLogin: { userInfo },\r\n      } = getState()\r\n  \r\n      const config = {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${userInfo.token}`,\r\n        },\r\n      };\r\n  \r\n     \r\n      const { data } = await axios.post(\r\n        `/api/orders/add/`,\r\n        order , \r\n       config\r\n       )\r\n\r\n      dispatch({\r\n        type: ORDER_CREATE_SUCCESS,\r\n        payload: data,\r\n      })\r\n      \r\n      dispatch({\r\n        type: CART_CLEAR_ITEMS,\r\n        payload: data,\r\n      })\r\n\r\n      localStorage.removeItem('cartItems')\r\n      \r\n    } catch (error) {\r\n      dispatch({\r\n        type:   ORDER_CREATE_FAIL ,\r\n        payload:\r\n          error.response && error.response.data.detail\r\n            ? error.response.data.detail\r\n            : error.message,\r\n      });\r\n    }\r\n  };\r\n  \r\nexport const getOrderDetails = (id) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({\r\n      type: ORDER_DETAILS_REQUEST,\r\n    });\r\n\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState()\r\n\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    };\r\n\r\n   \r\n    const { data } = await axios.get(\r\n      `/api/orders/${id}/`,\r\n     config\r\n     )\r\n\r\n    dispatch({\r\n      type: ORDER_DETAILS_SUCCESS,\r\n      payload: data,\r\n    })\r\n    \r\n   \r\n    \r\n  } catch (error) {\r\n    dispatch({\r\n      type:   ORDER_DETAILS_FAIL ,\r\n      payload:\r\n        error.response && error.response.data.detail\r\n          ? error.response.data.detail\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\nexport const deleteOrder = (id) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({\r\n      type: ORDER_DELETE_REQUEST,\r\n    });\r\n\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState();\r\n\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    };\r\n\r\n    const { data } = await axios.delete(`/api/orders/delete/${id}/`, config);\r\n\r\n    dispatch({\r\n      type: ORDER_DELETE_SUCCESS,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: ORDER_DELETE_FAIL,\r\n      payload:\r\n        error.response && error.response.data.detail\r\n          ? error.response.data.detail\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\nexport const listMyOrders = () => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({\r\n      type: ORDER_LIST_MY_REQUEST,\r\n    });\r\n\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState()\r\n\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    };\r\n\r\n   \r\n    const { data } = await axios.get(\r\n      `/api/orders/myorders/`,\r\n     config\r\n     )\r\n\r\n    dispatch({\r\n      type: ORDER_LIST_MY_SUCCESS,\r\n      payload: data,\r\n    })\r\n    \r\n   \r\n    \r\n  } catch (error) {\r\n    dispatch({\r\n      type:   ORDER_LIST_MY_FAIL ,\r\n      payload:\r\n        error.response && error.response.data.detail\r\n          ? error.response.data.detail\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const listOrders = () => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({\r\n      type: ORDER_LIST_REQUEST,\r\n    });\r\n\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState()\r\n\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    };\r\n\r\n   \r\n    const { data } = await axios.get(\r\n      `/api/orders/`,\r\n     config\r\n     )\r\n\r\n    dispatch({\r\n      type: ORDER_LIST_SUCCESS,\r\n      payload: data,\r\n    })\r\n    \r\n   \r\n    \r\n  } catch (error) {\r\n    dispatch({\r\n      type:   ORDER_LIST_FAIL ,\r\n      payload:\r\n        error.response && error.response.data.detail\r\n          ? error.response.data.detail\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n \r\nexport const payOrder = (id,paymentResult) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({\r\n      type: ORDER_PAY_REQUEST,\r\n    });\r\n\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState()\r\n\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    };\r\n\r\n   \r\n    const { data } = await axios.put(\r\n      `/api/orders/${id}/pay/`,\r\n      paymentResult,\r\n     config\r\n     )\r\n\r\n    dispatch({\r\n      type: ORDER_PAY_SUCCESS,\r\n      payload: data,\r\n    })\r\n    \r\n   \r\n    \r\n  } catch (error) {\r\n    dispatch({\r\n      type:   ORDER_PAY_FAIL ,\r\n      payload:\r\n        error.response && error.response.data.detail\r\n          ? error.response.data.detail\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const deliverOrder = (order) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({\r\n      type: ORDER_DELIVER_REQUEST,\r\n    });\r\n\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState()\r\n\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    };\r\n\r\n   \r\n    const { data } = await axios.put(\r\n      `/api/orders/${order._id}/deliver/`,\r\n      {},\r\n     config\r\n     )\r\n\r\n    dispatch({\r\n      type: ORDER_DELIVER_SUCCESS,\r\n      payload: data,\r\n    })\r\n    \r\n   \r\n    \r\n  } catch (error) {\r\n    dispatch({\r\n      type:   ORDER_DELIVER_FAIL ,\r\n      payload:\r\n        error.response && error.response.data.detail\r\n          ? error.response.data.detail\r\n          : error.message,\r\n    });\r\n  }\r\n};","C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\actions\\cartActions.js",[],"C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\actions\\productActions.js",["210"],"import {\r\n  PRODUCT_LIST_REQUEST,\r\n  PRODUCT_LIST_SUCCESS,\r\n  PRODUCT_LIST_FAIL,\r\n  PRODUCT_DETAILS_REQUEST,\r\n  PRODUCT_DETAILS_SUCCESS,\r\n  PRODUCT_DETAILS_FAIL,\r\n  PRODUCT_DELETE_REQUEST,\r\n  PRODUCT_DELETE_SUCCESS,\r\n  PRODUCT_DELETE_FAIL,\r\n  PRODUCT_CREATE_REQUEST,\r\n  PRODUCT_CREATE_SUCCESS,\r\n  PRODUCT_CREATE_FAIL,\r\n  PRODUCT_UPDATE_REQUEST,\r\n  PRODUCT_UPDATE_SUCCESS,\r\n  PRODUCT_UPDATE_FAIL,\r\n  PRODUCT_CREATE_REVIEW_REQUEST,\r\n  PRODUCT_CREATE_REVIEW_SUCCESS,\r\n  PRODUCT_CREATE_REVIEW_FAIL,\r\n  PRODUCT_TOP_REQUEST,\r\n  PRODUCT_TOP_SUCCESS,\r\n  PRODUCT_TOP_FAIL,\r\n} from \"../constants/productConstants\";\r\n\r\nimport axios from \"axios\";\r\n\r\nexport const listProducts =\r\n  (keyword = \"\") =>\r\n  async (dispatch) => {\r\n    try {\r\n      dispatch({ type: PRODUCT_LIST_REQUEST });\r\n      const { data } = await axios.get(`/api/products${keyword}`);\r\n      dispatch({\r\n        type: PRODUCT_LIST_SUCCESS,\r\n        payload: data,\r\n      });\r\n    } catch (error) {\r\n      dispatch({\r\n        type: PRODUCT_LIST_FAIL,\r\n        payload:\r\n          error.response && error.response.data.detail\r\n            ? error.response.data.detail\r\n            : error.message,\r\n      });\r\n    }\r\n  };\r\n\r\n  export const listTopProducts =\r\n  () =>\r\n  async (dispatch) => {\r\n    try {\r\n      dispatch({ type: PRODUCT_TOP_REQUEST });\r\n      const { data } = await axios.get(`/api/products/top/`);\r\n      dispatch({\r\n        type: PRODUCT_TOP_SUCCESS,\r\n        payload: data,\r\n      });\r\n    } catch (error) {\r\n      dispatch({\r\n        type: PRODUCT_TOP_FAIL,\r\n        payload:\r\n          error.response && error.response.data.detail\r\n            ? error.response.data.detail\r\n            : error.message,\r\n      });\r\n    }\r\n  };\r\n\r\n\r\nexport const listProductsDetails = (id) => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: PRODUCT_DETAILS_REQUEST });\r\n    const { data } = await axios.get(`/api/products/${id}`);\r\n    dispatch({\r\n      type: PRODUCT_DETAILS_SUCCESS,\r\n      payload: data,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: PRODUCT_DETAILS_FAIL,\r\n      payload:\r\n        error.response && error.response.data.detail\r\n          ? error.response.data.detail\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const deleteProduct = (id) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({\r\n      type: PRODUCT_DELETE_REQUEST,\r\n    });\r\n\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState();\r\n\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    };\r\n\r\n    const { data } = await axios.delete(`/api/products/delete/${id}/`, config);\r\n\r\n    dispatch({\r\n      type: PRODUCT_DELETE_SUCCESS,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: PRODUCT_DELETE_FAIL,\r\n      payload:\r\n        error.response && error.response.data.detail\r\n          ? error.response.data.detail\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const createProduct = () => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({\r\n      type: PRODUCT_CREATE_REQUEST,\r\n    });\r\n\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState();\r\n\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    };\r\n\r\n    const { data } = await axios.post(`/api/products/create/`, {}, config);\r\n\r\n    dispatch({\r\n      type: PRODUCT_CREATE_SUCCESS,\r\n      payload: data,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: PRODUCT_CREATE_FAIL,\r\n      payload:\r\n        error.response && error.response.data.detail\r\n          ? error.response.data.detail\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const updateProduct = (product) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({\r\n      type: PRODUCT_UPDATE_REQUEST,\r\n    });\r\n\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState();\r\n\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    };\r\n\r\n    const { data } = await axios.put(\r\n      `/api/products/update/${product._id}/`,\r\n      product,\r\n      config\r\n    );\r\n\r\n    dispatch({\r\n      type: PRODUCT_UPDATE_SUCCESS,\r\n      payload: data,\r\n    });\r\n\r\n    dispatch({\r\n      type: PRODUCT_DETAILS_SUCCESS,\r\n      payload: data,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: PRODUCT_UPDATE_FAIL,\r\n      payload:\r\n        error.response && error.response.data.detail\r\n          ? error.response.data.detail\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\nexport const createProductReview =\r\n  (productId, review) => async (dispatch, getState) => {\r\n    try {\r\n      dispatch({\r\n        type: PRODUCT_CREATE_REVIEW_REQUEST,\r\n      });\r\n\r\n      const {\r\n        userLogin: { userInfo },\r\n      } = getState();\r\n\r\n      const config = {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${userInfo.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.post(\r\n        `/api/products/${productId}/reviews/`,\r\n        review,\r\n        config\r\n      );\r\n\r\n      dispatch({\r\n        type: PRODUCT_CREATE_REVIEW_SUCCESS,\r\n        payload: data\r\n      });\r\n\r\n     \r\n    } catch (error) {\r\n      dispatch({\r\n        type: PRODUCT_CREATE_REVIEW_FAIL,\r\n        payload:\r\n          error.response && error.response.data.detail\r\n            ? error.response.data.detail\r\n            : error.message,\r\n      });\r\n    }\r\n  };\r\n","C:\\Users\\rites\\Desktop\\Ecommerce-react-django-main\\my-app\\src\\components\\SearchBox.js",[],{"ruleId":"211","replacedBy":"212"},{"ruleId":"213","replacedBy":"214"},{"ruleId":"215","severity":1,"message":"216","line":6,"column":3,"nodeType":"217","messageId":"218","endLine":6,"endColumn":8},{"ruleId":"219","severity":1,"message":"220","line":32,"column":19,"nodeType":"221","messageId":"222","endLine":32,"endColumn":21},{"ruleId":"215","severity":1,"message":"223","line":1,"column":17,"nodeType":"217","messageId":"218","endLine":1,"endColumn":25},{"ruleId":"224","severity":1,"message":"225","line":38,"column":6,"nodeType":"226","endLine":38,"endColumn":24,"suggestions":"227"},{"ruleId":"215","severity":1,"message":"228","line":1,"column":27,"nodeType":"217","messageId":"218","endLine":1,"endColumn":36},{"ruleId":"215","severity":1,"message":"228","line":1,"column":27,"nodeType":"217","messageId":"218","endLine":1,"endColumn":36},{"ruleId":"215","severity":1,"message":"229","line":10,"column":10,"nodeType":"217","messageId":"218","endLine":10,"endColumn":28},{"ruleId":"219","severity":1,"message":"220","line":50,"column":18,"nodeType":"221","messageId":"222","endLine":50,"endColumn":20},{"ruleId":"224","severity":1,"message":"230","line":61,"column":6,"nodeType":"226","endLine":61,"endColumn":60,"suggestions":"231"},{"ruleId":"215","severity":1,"message":"223","line":1,"column":17,"nodeType":"217","messageId":"218","endLine":1,"endColumn":25},{"ruleId":"215","severity":1,"message":"232","line":19,"column":14,"nodeType":"217","messageId":"218","endLine":19,"endColumn":27},{"ruleId":"215","severity":1,"message":"233","line":20,"column":12,"nodeType":"217","messageId":"218","endLine":20,"endColumn":23},{"ruleId":"224","severity":1,"message":"234","line":39,"column":6,"nodeType":"226","endLine":39,"endColumn":41,"suggestions":"235"},{"ruleId":"215","severity":1,"message":"223","line":1,"column":17,"nodeType":"217","messageId":"218","endLine":1,"endColumn":25},{"ruleId":"215","severity":1,"message":"223","line":1,"column":17,"nodeType":"217","messageId":"218","endLine":1,"endColumn":25},{"ruleId":"215","severity":1,"message":"236","line":2,"column":34,"nodeType":"217","messageId":"218","endLine":2,"endColumn":37},{"ruleId":"215","severity":1,"message":"237","line":21,"column":10,"nodeType":"217","messageId":"218","endLine":21,"endColumn":19},{"ruleId":"215","severity":1,"message":"238","line":1,"column":17,"nodeType":"217","messageId":"218","endLine":1,"endColumn":25},{"ruleId":"215","severity":1,"message":"239","line":17,"column":3,"nodeType":"217","messageId":"218","endLine":17,"endColumn":28},{"ruleId":"215","severity":1,"message":"240","line":25,"column":3,"nodeType":"217","messageId":"218","endLine":25,"endColumn":20},{"ruleId":"215","severity":1,"message":"241","line":138,"column":13,"nodeType":"217","messageId":"218","endLine":138,"endColumn":17},{"ruleId":"215","severity":1,"message":"241","line":106,"column":13,"nodeType":"217","messageId":"218","endLine":106,"endColumn":17},"no-native-reassign",["242"],"no-negated-in-lhs",["243"],"no-unused-vars","'Image' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'useState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'order._id'. Either include them or remove the dependency array.","ArrayExpression",["244"],"'useEffect' is defined but never used.","'ORDER_LIST_MY_FAIL' is defined but never used.","React Hook useEffect has missing dependencies: 'history' and 'userInfo'. Either include them or remove the dependency array.",["245"],"'loadingDelete' is assigned a value but never used.","'errorDelete' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["246"],"'Row' is defined but never used.","'uploading' is assigned a value but never used.","'Children' is defined but never used.","'USER_UPDATE_PROFILE_RESET' is defined but never used.","'USER_UPDATE_RESET' is defined but never used.","'data' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"247","fix":"248"},{"desc":"249","fix":"250"},{"desc":"251","fix":"252"},"Update the dependencies array to be: [success, history, order._id, dispatch]",{"range":"253","text":"254"},"Update the dependencies array to be: [dispatch, order, orderId, successPay, successDeliver, userInfo, history]",{"range":"255","text":"256"},"Update the dependencies array to be: [user, userId, successUpdate, history, dispatch]",{"range":"257","text":"258"},[1279,1297],"[success, history, order._id, dispatch]",[1876,1930],"[dispatch, order, orderId, successPay, successDeliver, userInfo, history]",[1424,1459],"[user, userId, successUpdate, history, dispatch]"]